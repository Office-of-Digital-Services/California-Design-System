ca-grid,
.grid {
  /* End-user can override any of these vars. */
  /* Consider adding sm/md/lg shortcut attributes. */
  --min-cell-inline-size: 22.5rem;
  --min-columns: 1;
  --max-columns: 6;
  --col-gap: 1rem;
  --row-gap: 1rem;
  --flow-style: auto-fit;

  display: grid;
  /* We'll need to teach a whole course to explain this one. */
  grid-template-columns: repeat(
      var(--flow-style),
      minmax(
        min(
          calc(
            (100% - ((var(--max-columns) - 1) * var(--col-gap))) /
            var(--min-columns)
          ),
          max(
            var(--min-cell-inline-size),
            calc(
              (100% - ((var(--max-columns) - 1) * var(--col-gap))) /
              var(--max-columns)
            )
          )
        ),
        1fr
      )
    );
  grid-template-rows: auto;
  column-gap: var(--col-gap);
  row-gap: var(--row-gap);

  /* Set maximum number of columns on the grid. */
  &[max-col="2"],
  &.grid-max-col-2 {
    --max-columns: 2;
  }
  &[max-col="3"],
  &.grid-max-col-3 {
    --max-columns: 3;
  }
  &[max-col="4"],
  &.grid-max-col-4 {
    --max-columns: 4;
  }
  &[max-col="5"],
  &.grid-max-col-5 {
    --max-columns: 5;
  }
  &[max-col="6"],
  &.grid-max-col-6 {
    --max-columns: 6;
  }
  /* Set minimum number of columns on the grid. */
  &[min-col="2"],
  &.grid-min-col-2 {
    --min-columns: 2;
  }
  &[min-col="3"],
  &.grid-min-col-3 {
    --min-columns: 3;
  }
  &[min-col="4"],
  &.grid-min-col-4 {
    --min-columns: 4;
  }
  &[min-col="5"],
  &.grid-min-col-5 {
    --min-columns: 5;
  }
  &[min-col="6"],
  &.grid-min-col-6 {
    --min-columns: 6;
  }

  /* An example cell size shortcut. */
  &[cell-size="large"] {
    --min-cell-inline-size: 48ch;
  }

  /* Change the fit/fill style of the grid columns. */
  &[flow="fit"] {
    --flow-style: auto-fit;
  }
  &[flow="fill"] {
    --flow-style: auto-fill;
  }
}

/* Since the grid class will be used with lists often, provide some help here. */
:is(ul, ol).grid {
  padding: 0;
  list-style-type: none;

  & > li {
    height: 100%;
    width: 100%;
    margin: 0;
  }
}

/* 
 * COLSPAN
 * 
 * Unfortunately, an easy way to span columns is not possible with this setup.
 * The problem is that media/container queries don't yet support variables.
 * Given our variables here, we can't yet calculate query widths for making 
 * spans responsive. In other words, we can't dynamically break spans on mobile.
 *
 * With that said, an end-user who knows their grid's values can make their own span.
 * Consider something like the following.
 *
 * ca-grid-span-3 {
 *   @container (inline-size > calc(32ch * 3 + (2 * 1rem))) {
 *     grid-column: span 3;
 *   }
 * }
 *
 * Here's the math on that...
 * 
 * @container (inline-size > calc(MIN-CELL-INLINE-SIZE * NUMBER-OF-COLUMNS + GAPS))
 *
 * This would trigger as soon as the overall grid's size grows beyond the "NUMBER-OF-COLUMNS"
 * value. So it's a mobile-first approach.
 * 
 * Another option is to simply lock down the grid's possible values, and then manually 
 * code the container queries for a limited number of spans.
 *
 * Or, we can call this the "dynamic" or "flow" grid for content (no spans), then create 
 * another "static" grid that's more for layouts. Much easier to span. But we need to know
 * more about overall layout/design before we can do "static" grids in a smart way.
 * 
 * Need to revisit this design.
 */
