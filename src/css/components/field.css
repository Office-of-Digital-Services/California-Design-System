ca-field {
  margin-block: 1.5rem;
  max-inline-size: var(--content-width-medium);

  & p {
    color: var(--gray-70);
  }

  & :is(input, textarea, select):focus-within {
    border-color: var(--primary-110);
  }

  /* Remove top and bottom margins from first and last children. */
  & > :first-child {
    margin-block-start: 0;
  }
  & > :last-child {
    margin-block-end: 0;
  }

  /* If using HTML5 required attribute, automatically add the red asterix. */
  &:has(*:required):not(:has(ca-req)) label:not(:has(input))::after {
    display: inline-block;
    content: " *";
    margin-inline-start: .25rem;
    color: var(--red-70);
  }

  &.invalid,
  &[invalid],
  &:has(*:invalid) {
    & p {
      color: var(--red-70);
    }

    & :is(textarea, select, input:not([type="radio"], [type="checkbox"])) {
      border-block-end-color: var(--red-70);
    }
  }

  /* When it's a simple label + input, do a simple vertical flex. */
  /* We need to allow disclaimer/fine-print text below the input too. */
  &:has(textarea, select, input:not([type="radio"], [type="checkbox"])) {
    display: block;

    & label:not(:has(input, select, textarea)) {
      margin-block-end: 1rem;
    }
  }

  /* When it's a checkbox or radio button, switch to grid. */
  /* Consider extending this to other scenarios, such as "initial each paragraph" forms. */
  &:has(input:is([type="radio"], [type="checkbox"])) {
    display: grid;
    grid-template-columns: 1rem auto;
    grid-template-rows: auto;
    gap: .5rem 1rem;

    /* All subsequent elements should stay in the second column. */
    & > :nth-child(n + 3) {
      grid-column-start: 2;
    }
  }
}
