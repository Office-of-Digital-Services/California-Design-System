/* Basic cards, with or without visual */
ca-card {
  --image-min-size: auto;
  --image-max-size: 1fr;

  display: block;
  padding: 1rem;
  overflow: hidden;
  background: var(--primary-background-30);
  border-radius: var(--border-radius);
  box-shadow: var(--primary-shadow-1);

  & a {
    text-decoration: none;
  }

  & :is(div, section, article) > :first-child,
  & > :first-child {
    margin-block-start: 0;
  }

  & :is(div, section, article) > :last-child,
  & > :last-child {
    margin-block-end: 0;
  }

  & > :is(div, section, article) {
    padding: 0;
  }

  /* The full card will "rise" when a link/button within is hovered. */
  &[interactive="links"] {
    & a:hover {
      text-decoration: underline;
    }

    &:has(a:hover, button:hover) {
      transform: scale(1.01);
      box-shadow: var(--primary-shadow-2);
    }
  }

  /* 
	 * When we want the whole card to be clickable, we expand the link's target area to fill the card. 
	 * This allows us to present a natural mark-up to assistive devices while still acheiving full clickability.
	 * Warning: this will probably do unexpected things when more than one link/button is present.
	 */
  &[interactive="full"] {
    position: relative;

    & :is(a, button) {
      &::before {
        content: "";
        position: absolute;
        inset-block-start: 0;
        inset-inline-start: 0;
        block-size: 100%;
        inline-size: 100%;
      }
    }

    &:has(a:hover, button:hover) {
      transform: scale(1.01);
      box-shadow: var(--primary-shadow-2);

      & a:hover {
        text-decoration: underline;
      }
    }
  }
}

/* Cards that have a visual */
ca-card:has(> img, > svg, > ca-visual) {
  padding: 0;
  /* Grid gives us better tools over flex where we don't want images to fill full width/height of the card. */
  display: grid;

  &:has(img:first-child, svg:first-child, ca-visual:first-child) {
    grid-template-columns: auto;
    grid-template-rows: minmax(var(--image-min-size), var(--image-max-size)) auto;
  }

  &:has(img:last-child, svg:last-child, ca-visual:last-child) {
    grid-template-columns: auto;
    grid-template-rows: auto minmax(
        var(--image-min-size),
        var(--image-max-size)
      );
  }

  & > :is(img, svg, ca-visual) {
    place-self: center;
  }

  & > :is(div, section, article) {
    padding: 1rem;
  }

  &[fit] > :is(img, svg, ca-visual) {
    block-size: 100%;
    inline-size: 100%;
  }

  &[fit|="pad"] > :is(img, svg, ca-visual) {
    padding: 1rem;
  }

  &[fit*="fill"] > :is(img, svg, ca-visual) {
    object-fit: fill;
  }

  &[fit*="cover"] > :is(img, svg, ca-visual) {
    object-fit: cover;
  }

  &[fit*="contain"] > :is(img, svg, ca-visual) {
    object-fit: contain;
  }

  &[image-min-size="extra-small"] {
    --image-min-size: 25%;
  }

  &[image-min-size="small"] {
    --image-min-size: 33%;
  }

  &[image-min-size="medium"] {
    --image-min-size: 50%;
  }

  &[image-min-size="large"] {
    --image-min-size: 66%;
  }

  &[image-min-size="extra-large"] {
    --image-min-size: 75%;
  }

  &[image-max-size="extra-small"] {
    --image-max-size: 25%;
  }

  &[image-max-size="small"] {
    --image-max-size: 33%;
  }

  &[image-max-size="medium"] {
    --image-max-size: 50%;
  }

  &[image-max-size="large"] {
    --image-max-size: 66%;
  }

  &[image-max-size="extra-large"] {
    --image-max-size: 75%;
  }

  /* Switch up the grid when direction is set to horizontal. */
  &[direction="horizontal"] {
    &:has(img:first-child, svg:first-child, ca-visual:first-child) {
      grid-template-rows: auto;
      grid-template-columns: minmax(
          var(--image-min-size),
          var(--image-max-size)
        ) auto;
    }

    &:has(img:last-child, svg:last-child, ca-visual:last-child) {
      grid-template-rows: auto;
      grid-template-columns: auto minmax(
          var(--image-min-size),
          var(--image-max-size)
        );
    }
  }
}

@container main (width > 50rem) {
  ca-card[direction="large:horizontal"] {
    &:has(img:first-child, svg:first-child, ca-visual:first-child) {
      grid-template-rows: auto;
      grid-template-columns: minmax(
          var(--image-min-size),
          var(--image-max-size)
        ) auto;
    }

    &:has(img:last-child, svg:last-child, ca-visual:last-child) {
      grid-template-rows: auto;
      grid-template-columns: auto minmax(
          var(--image-min-size),
          var(--image-max-size)
        );
    }
  }
}

/* Animations for desktop. */
@media screen and (prefers-reduced-motion: no-preference) {
  ca-card {
    transition: box-shadow .2s ease-in-out, transform .2s ease-in-out;
  }
}

ca-visual {
  display: flex;
  align-items: center;
  justify-content: center;
}
